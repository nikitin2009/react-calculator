{"version":3,"sources":["components/ButtonPanel/ButtonPanel.module.css","components/Button/Button.module.css","components/Display/Display.module.css","components/App/App.module.css","components/Display/Display.js","components/Display/index.js","components/Button/index.js","components/Button/Button.js","components/ButtonPanel/ButtonPanel.js","components/ButtonPanel/index.js","logic/operate.js","components/App/index.js","components/App/App.js","logic/calculate.js","serviceWorker.js","index.js"],"names":["module","exports","panelRow","panelButton","panelButton2x","button","buttonOperation","display","calculator","Display","_ref","result","error","react_default","a","createElement","className","Styles","defaultProps","Button","name","color","clickHandler","buttonClass","onClick","ButtonPanel","rowsJSX","map","row","key","components_Button","includes","operate","numberOne","numberTwo","operation","x","Big","y","plus","minus","times","div","toString","App","state","total","next","handleClick","buttonName","_this","setState","prevState","data","message","replace","calculate","_this$state","this","components_Display","components_ButtonPanel","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c90cc97.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"panelRow\":\"ButtonPanel_panelRow__1bv4o\",\"panelButton\":\"ButtonPanel_panelButton__M0Ks8\",\"panelButton2x\":\"ButtonPanel_panelButton2x__3Nr77 ButtonPanel_panelButton__M0Ks8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3IXL3\",\"buttonOperation\":\"Button_buttonOperation__n311C Button_button__3IXL3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__2snzi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"calculator\":\"App_calculator__2kFmf\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Styles from './Display.module.css';\n\nconst Display = ({result, error}) => {\n  return (\n    <div className={ Styles.display } >\n      { error || result }\n    </div>\n  );\n}\n\nDisplay.propTypes = {\n  result: PropTypes.string.isRequired,\n};\n\nDisplay.defaultProps = {\n  result: '0',\n}\n\nexport default Display;\n","import Display from './Display';\r\n\r\nexport default Display;","import Button from './Button';\r\n\r\nexport default Button;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Styles from './Button.module.css';\n\nconst Button = ({name, color, clickHandler}) => {\n  const buttonClass = color ? Styles.buttonOperation : Styles.button;\n\n  return (\n    <button\n      className={ buttonClass }\n      onClick={ () => clickHandler(name) }\n    >\n      {name}\n    </button>\n  );\n}\n\nButton.propTypes = {\n  name: PropTypes.string.isRequired,\n};\n\nexport default Button;\n","import React from 'react';\nimport Button from '../Button';\n\nimport Styles from './ButtonPanel.module.css';\n\nfunction ButtonPanel({clickHandler}) {\n\n  const rows = [\n    ['AC', '+/-', '%', '÷'],\n    ['7', '8', '9', 'x'],\n    ['4', '5', '6', '-'],\n    ['1', '2', '3', '+'],\n    ['0', '.', '=']\n  ];\n\n  const rowsJSX = rows.map( row => (\n    <div\n      key={ row }\n      className={ Styles.panelRow }\n    >\n      { row.map( name => (\n        <div\n          key={ name }\n          className={ name === '0' ? Styles.panelButton2x : Styles.panelButton }\n        >\n          <Button\n            name={ name }\n            color={ ['÷', 'x', '-', '+', '='].includes(name) }\n            clickHandler={ clickHandler }\n          />\n        </div>\n      )) }\n    </div>\n  ));\n\n  return (\n    <div className='panel'>\n      { rowsJSX }\n    </div>\n  );\n}\n\nexport default ButtonPanel;\n","import ButtonPanel from './ButtonPanel';\r\n\r\nexport default ButtonPanel;","import Big from 'big.js';\r\n\r\nexport default function operate(numberOne, numberTwo, operation) {\r\n  \r\n  const x = numberOne ? new Big(numberOne) : 0;\r\n  const y = numberTwo ? new Big(numberTwo) : 0;\r\n  let result;\r\n\r\n  switch (operation) {\r\n    case '+':\r\n      result = x.plus(y);\r\n      break;\r\n\r\n    case '-':\r\n      result = x.minus(y);\r\n      break;\r\n\r\n    case 'x':\r\n      result = x.times(y);\r\n      break;\r\n\r\n    case '÷':\r\n      result = x.div(y);\r\n      break;\r\n\r\n    default:\r\n      result = y || x;\r\n      break;\r\n  }\r\n\r\n  return result.toString();\r\n}\r\n","import App from './App';\r\n\r\nexport default App;","import React, {Component} from 'react';\n\n// Components\nimport Display from '../Display';\nimport ButtonPanel from '../ButtonPanel';\n\n// Helpers\nimport calculate from '../../logic/calculate';\n\n// Styles\nimport Styles from './App.module.css';\n\nclass App extends Component {\n\n  state = {\n    total:     null,\n    next:      null,\n    operation: null,\n    error:     null,\n  }\n\n  handleClick = buttonName => this.setState(prevState => calculate(prevState, buttonName));\n\n  render() {\n    const {total, next, error} = this.state;\n    const result = next || total || '0';\n\n    return (\n      <div className={ Styles.calculator }>\n        <Display result={ result } error={ error } />\n        <ButtonPanel clickHandler={ this.handleClick } />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import operate from './operate';\r\n\r\nexport default function calculate(data, buttonName) {\r\n  \r\n  const {total, next, operation} = data;\r\n  data.error = null;\r\n\r\n  try {\r\n    switch (buttonName) {\r\n      case 'AC':\r\n        data.total = null;\r\n        data.next = null;\r\n        data.operation = null;\r\n        break;\r\n        \r\n      case '+/-':\r\n        if (next) {\r\n          data.next = operate('-1', next, 'x');\r\n        }\r\n        break;\r\n\r\n      case '%':\r\n        if (next) {\r\n          data.next = operate(next, '100', '÷');\r\n        }\r\n        break;\r\n\r\n      case '=':\r\n        data.total = operate(total, next, operation);\r\n        data.next = null;\r\n        data.operation = null;\r\n        break;\r\n          \r\n      case '+':\r\n      case '-':\r\n      case 'x':\r\n      case '÷':\r\n        data.total = operate(total, next, operation);\r\n        data.next = null;\r\n        data.operation = buttonName;\r\n        break;\r\n        \r\n      case '.':\r\n        if (next) {\r\n          data.next += next.includes('.') ? '' : '.';\r\n        } else {\r\n          data.next = '0.';\r\n        }\r\n        break;\r\n\r\n      default:\r\n        if (next && next !== '0') {\r\n          data.next += buttonName;\r\n        } else {\r\n          data.next = buttonName;\r\n        }\r\n        break;\r\n    }\r\n  } catch(error) {\r\n    data.error = error.message.replace('[big.js] ', '');\r\n    data.total = null;\r\n    data.next = null;\r\n    data.operation = null;\r\n  }\r\n\r\n  return data;\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}